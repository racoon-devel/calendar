// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInvitesError get invites error
//
// swagger:model GetInvitesError
type GetInvitesError struct {

	// Код ошибки
	// 401 - требуется авторизация
	// 500 - ошибка на стороне сервера
	//
	// Required: true
	// Enum: [401 500]
	Code *int64 `json:"code"`
}

// Validate validates this get invites error
func (m *GetInvitesError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getInvitesErrorTypeCodePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[401,500]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getInvitesErrorTypeCodePropEnum = append(getInvitesErrorTypeCodePropEnum, v)
	}
}

// prop value enum
func (m *GetInvitesError) validateCodeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getInvitesErrorTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetInvitesError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get invites error based on context it is used
func (m *GetInvitesError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetInvitesError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetInvitesError) UnmarshalBinary(b []byte) error {
	var res GetInvitesError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

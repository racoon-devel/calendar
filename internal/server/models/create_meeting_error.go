// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMeetingError create meeting error
//
// swagger:model CreateMeetingError
type CreateMeetingError struct {

	// Код ошибки
	// 400 - неверный формат RRULE
	// 401 - требуется автоизация
	// 404 - не найден один из приглашенных пользователей
	// 700 - текущий пользователь занят в момент встречи
	//
	// Required: true
	// Enum: [400 401 404 700]
	Code *int64 `json:"code"`
}

// Validate validates this create meeting error
func (m *CreateMeetingError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createMeetingErrorTypeCodePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[400,401,404,700]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMeetingErrorTypeCodePropEnum = append(createMeetingErrorTypeCodePropEnum, v)
	}
}

// prop value enum
func (m *CreateMeetingError) validateCodeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, createMeetingErrorTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMeetingError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create meeting error based on context it is used
func (m *CreateMeetingError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateMeetingError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMeetingError) UnmarshalBinary(b []byte) error {
	var res CreateMeetingError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewUserErrorResponse new user error response
//
// swagger:model NewUserErrorResponse
type NewUserErrorResponse struct {

	// Human-readable сообщение об ошибке
	Message string `json:"message,omitempty"`

	// Результат операции (1 - внутренняя ошибка, 2 - пользователь с таким логином уже существует, 3 - не указано обязательное поле, 4 - слишком короткий или длинный пароль)
	// Required: true
	// Enum: [1 2 3 4]
	Status *int64 `json:"status"`
}

// Validate validates this new user error response
func (m *NewUserErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var newUserErrorResponseTypeStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newUserErrorResponseTypeStatusPropEnum = append(newUserErrorResponseTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *NewUserErrorResponse) validateStatusEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, newUserErrorResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NewUserErrorResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new user error response based on context it is used
func (m *NewUserErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewUserErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewUserErrorResponse) UnmarshalBinary(b []byte) error {
	var res NewUserErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

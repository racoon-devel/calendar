// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API for Calendar demo project",
    "title": "Calendar API",
    "version": "1.0.0"
  },
  "paths": {
    "/invite": {
      "get": {
        "tags": [
          "invite"
        ],
        "summary": "Получить информацию о приглашениях для текущего пользователя",
        "operationId": "getInvites",
        "responses": {
          "200": {
            "description": "Список приглашений",
            "schema": {
              "$ref": "#/definitions/GetInvitesResponse"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    },
    "/meeting": {
      "post": {
        "tags": [
          "meeting"
        ],
        "summary": "Создать встречу",
        "operationId": "createMeeting",
        "parameters": [
          {
            "name": "meeting",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMeetingRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Встреча создана",
            "schema": {
              "$ref": "#/definitions/CreateMeetingResponse"
            }
          },
          "400": {
            "description": "Невозможно выполнить запрос",
            "schema": {
              "$ref": "#/definitions/CreateMeetingErrorResponse"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "Вернуть список имен и фамилий пользователей (требует авторизацию)",
        "tags": [
          "user"
        ],
        "summary": "Получение списка всех пользователей",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Список пользователей (в идеале бы прикрутить поиск по имени и фамилии, но для простоты оставлю так)",
            "schema": {
              "$ref": "#/definitions/GetUsersResponse"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      },
      "post": {
        "description": "Доступно без аутентификации, может вызываться при регистрации нового пользователя",
        "tags": [
          "user"
        ],
        "summary": "Создание пользователя",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "400": {
            "description": "Не удалось выполнить запрос (пользователь уже существует)",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Вход в систему",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Вход выполнен успешно",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateMeetingErrorResponse": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "Код ошибки (700 - пользователь, создающий встречу занят в указанное время, 701 - неверный формат для RRULE, 702 - не найден приглашенный пользователь)",
          "type": "integer",
          "enum": [
            700,
            701,
            702
          ]
        }
      }
    },
    "CreateMeetingRequest": {
      "type": "object",
      "required": [
        "title",
        "startTime",
        "duration"
      ],
      "properties": {
        "description": {
          "description": "Описание встречи",
          "type": "string",
          "maxLength": 1000
        },
        "duration": {
          "description": "Длительность встречи (минуты)",
          "type": "integer",
          "maximum": 1440,
          "minimum": 5
        },
        "notify": {
          "description": "Уведомить пользователя о встрече перед ней (единицы измерения - минуты!)",
          "type": "integer",
          "minimum": 1
        },
        "private": {
          "description": "Приватность деталей встречи",
          "type": "boolean",
          "default": false
        },
        "rrule": {
          "description": "Повторение задачи (формат RRULE, RFC5545)",
          "type": "string",
          "externalDocs": {
            "url": "https://www.rfc-editor.org/rfc/rfc5545"
          }
        },
        "startTime": {
          "description": "Временной интервал начала встречи (формат - часы:минуты, 24h-day)",
          "type": "string",
          "pattern": "^(?:([01]?\\d|2[0-3]):([0-5]?\\d))$",
          "example": "20:35"
        },
        "title": {
          "description": "Заголовок встречи",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "users": {
          "type": "array",
          "items": {
            "description": "ID приглашенного пользователя",
            "type": "integer"
          }
        }
      },
      "additionalProperties": false
    },
    "CreateMeetingResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID созданной задачи",
          "type": "integer"
        }
      }
    },
    "CreateUserRequest": {
      "type": "object",
      "required": [
        "login",
        "name",
        "surname",
        "password"
      ],
      "properties": {
        "login": {
          "$ref": "#/definitions/Login"
        },
        "name": {
          "description": "Имя пользователя",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "$ref": "#/definitions/Password"
        },
        "surname": {
          "description": "Фамилия пользователя",
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "CreateUserResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Идентификатор созданного пользователя",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "Dummy": {
      "type": "object"
    },
    "GetInvitesResponse": {
      "type": "object",
      "required": [
        "invites"
      ],
      "properties": {
        "invites": {
          "type": "array",
          "items": {
            "description": "Идентификаторы встреч, на которые пригласили пользователя",
            "type": "integer"
          }
        }
      }
    },
    "GetUsersResponse": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "surname": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Login": {
      "description": "Логин для входа в систему",
      "type": "string",
      "maxLength": 32,
      "minLength": 1
    },
    "LoginRequest": {
      "type": "object",
      "required": [
        "login",
        "password"
      ],
      "properties": {
        "login": {
          "$ref": "#/definitions/Login"
        },
        "password": {
          "$ref": "#/definitions/Password"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "Password": {
      "description": "Пароль",
      "type": "string",
      "maxLength": 32,
      "minLength": 8
    }
  },
  "tags": [
    {
      "description": "Пользователь календаря",
      "name": "user"
    },
    {
      "description": "Встреча",
      "name": "meeting"
    },
    {
      "description": "Приглашение на встречу",
      "name": "invite"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API for Calendar demo project",
    "title": "Calendar API",
    "version": "1.0.0"
  },
  "paths": {
    "/invite": {
      "get": {
        "tags": [
          "invite"
        ],
        "summary": "Получить информацию о приглашениях для текущего пользователя",
        "operationId": "getInvites",
        "responses": {
          "200": {
            "description": "Список приглашений",
            "schema": {
              "$ref": "#/definitions/GetInvitesResponse"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    },
    "/meeting": {
      "post": {
        "tags": [
          "meeting"
        ],
        "summary": "Создать встречу",
        "operationId": "createMeeting",
        "parameters": [
          {
            "name": "meeting",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateMeetingRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Встреча создана",
            "schema": {
              "$ref": "#/definitions/CreateMeetingResponse"
            }
          },
          "400": {
            "description": "Невозможно выполнить запрос",
            "schema": {
              "$ref": "#/definitions/CreateMeetingErrorResponse"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "Вернуть список имен и фамилий пользователей (требует авторизацию)",
        "tags": [
          "user"
        ],
        "summary": "Получение списка всех пользователей",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Список пользователей (в идеале бы прикрутить поиск по имени и фамилии, но для простоты оставлю так)",
            "schema": {
              "$ref": "#/definitions/GetUsersResponse"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      },
      "post": {
        "description": "Доступно без аутентификации, может вызываться при регистрации нового пользователя",
        "tags": [
          "user"
        ],
        "summary": "Создание пользователя",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "400": {
            "description": "Не удалось выполнить запрос (пользователь уже существует)",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Вход в систему",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Вход выполнен успешно",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          },
          "500": {
            "description": "Ошибка на стороне сервера",
            "schema": {
              "$ref": "#/definitions/Dummy"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateMeetingErrorResponse": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "description": "Код ошибки (700 - пользователь, создающий встречу занят в указанное время, 701 - неверный формат для RRULE, 702 - не найден приглашенный пользователь)",
          "type": "integer",
          "enum": [
            700,
            701,
            702
          ]
        }
      }
    },
    "CreateMeetingRequest": {
      "type": "object",
      "required": [
        "title",
        "startTime",
        "duration"
      ],
      "properties": {
        "description": {
          "description": "Описание встречи",
          "type": "string",
          "maxLength": 1000
        },
        "duration": {
          "description": "Длительность встречи (минуты)",
          "type": "integer",
          "maximum": 1440,
          "minimum": 5
        },
        "notify": {
          "description": "Уведомить пользователя о встрече перед ней (единицы измерения - минуты!)",
          "type": "integer",
          "minimum": 1
        },
        "private": {
          "description": "Приватность деталей встречи",
          "type": "boolean",
          "default": false
        },
        "rrule": {
          "description": "Повторение задачи (формат RRULE, RFC5545)",
          "type": "string",
          "externalDocs": {
            "url": "https://www.rfc-editor.org/rfc/rfc5545"
          }
        },
        "startTime": {
          "description": "Временной интервал начала встречи (формат - часы:минуты, 24h-day)",
          "type": "string",
          "pattern": "^(?:([01]?\\d|2[0-3]):([0-5]?\\d))$",
          "example": "20:35"
        },
        "title": {
          "description": "Заголовок встречи",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "users": {
          "type": "array",
          "items": {
            "description": "ID приглашенного пользователя",
            "type": "integer"
          }
        }
      },
      "additionalProperties": false
    },
    "CreateMeetingResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID созданной задачи",
          "type": "integer"
        }
      }
    },
    "CreateUserRequest": {
      "type": "object",
      "required": [
        "login",
        "name",
        "surname",
        "password"
      ],
      "properties": {
        "login": {
          "$ref": "#/definitions/Login"
        },
        "name": {
          "description": "Имя пользователя",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "$ref": "#/definitions/Password"
        },
        "surname": {
          "description": "Фамилия пользователя",
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "CreateUserResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Идентификатор созданного пользователя",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "Dummy": {
      "type": "object"
    },
    "GetInvitesResponse": {
      "type": "object",
      "required": [
        "invites"
      ],
      "properties": {
        "invites": {
          "type": "array",
          "items": {
            "description": "Идентификаторы встреч, на которые пригласили пользователя",
            "type": "integer"
          }
        }
      }
    },
    "GetUsersResponse": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetUsersResponseUsersItems0"
          }
        }
      }
    },
    "GetUsersResponseUsersItems0": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        }
      }
    },
    "Login": {
      "description": "Логин для входа в систему",
      "type": "string",
      "maxLength": 32,
      "minLength": 1
    },
    "LoginRequest": {
      "type": "object",
      "required": [
        "login",
        "password"
      ],
      "properties": {
        "login": {
          "$ref": "#/definitions/Login"
        },
        "password": {
          "$ref": "#/definitions/Password"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "Password": {
      "description": "Пароль",
      "type": "string",
      "maxLength": 32,
      "minLength": 8
    }
  },
  "tags": [
    {
      "description": "Пользователь календаря",
      "name": "user"
    },
    {
      "description": "Встреча",
      "name": "meeting"
    },
    {
      "description": "Приглашение на встречу",
      "name": "invite"
    }
  ]
}`))
}
